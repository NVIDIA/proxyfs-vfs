/* This file was automatically generated by generate_param.py. DO NOT EDIT */

#ifndef __PARAM_PROTO_H__
#define __PARAM_PROTO_H__

bool lp_bind_interfaces_only(void);
char *lp_comment(TALLOC_CTX *ctx, int);
int lp_config_backend(void);
const char *lp_dos_charset(void);
bool lp_enable_core_files(void);
const char **lp_interfaces(void);
bool lp_multicast_dns_register(void);
const char **lp_netbios_aliases(void);
const char *lp_netbios_name(void);
const char *lp_netbios_scope(void);
char *lp_path(TALLOC_CTX *ctx, int);
const char *lp_realm(void);
const char **lp_server_services(void);
char *lp_server_string(TALLOC_CTX *ctx);
const char *lp_share_backend(void);
const char *lp_unix_charset(void);
const char *lp_workgroup(void);
bool lp_administrative_share(int);
bool lp_browseable(int);
bool lp_browse_list(void);
int lp__domain_master(void);
bool lp_enhanced_browsing(void);
int lp_lm_announce(void);
int lp_lm_interval(void);
bool lp_local_master(void);
int lp_os_level(void);
int lp__preferred_master(void);
int lp_allow_dns_updates(void);
const char **lp_dns_forwarder(void);
const char **lp_dns_update_command(void);
int lp_machine_password_timeout(void);
const char **lp_nsupdate_command(void);
const char **lp_rndc_command(void);
const char **lp_spn_update_command(void);
int lp_case_sensitive(int);
int lp_default_case(int);
bool lp_delete_veto_files(int);
bool lp_hide_dot_files(int);
char *lp_hide_files(TALLOC_CTX *ctx, int);
bool lp_hide_special_files(int);
bool lp_hide_unreadable(int);
bool lp_hide_unwriteable_files(int);
bool lp_mangled_names(const struct share_params *p);
int lp_mangle_prefix(void);
char lp_mangling_char(const struct share_params *p);
char *lp_mangling_method(TALLOC_CTX *ctx);
bool lp_map_archive(int);
bool lp_map_hidden(int);
int lp_map_readonly(int);
bool lp_map_system(int);
int lp_max_stat_cache_size(void);
bool lp_preserve_case(int);
bool lp_short_preserve_case(int);
bool lp_stat_cache(void);
bool lp_store_dos_attributes(int);
char *lp_veto_files(TALLOC_CTX *ctx, int);
char *lp_veto_oplock_files(TALLOC_CTX *ctx, int);
int lp_client_ldap_sasl_wrapping(void);
char *lp_ldap_admin_dn(TALLOC_CTX *ctx);
int lp_ldap_connection_timeout(void);
bool lp_ldap_delete_dn(void);
int lp_ldap_deref(void);
int lp_ldap_follow_referral(void);
char *lp__ldap_group_suffix(TALLOC_CTX *ctx);
char *lp__ldap_idmap_suffix(TALLOC_CTX *ctx);
char *lp__ldap_machine_suffix(TALLOC_CTX *ctx);
int lp_ldap_page_size(void);
int lp_ldap_passwd_sync(void);
int lp_ldap_replication_sleep(void);
int lp_ldap_server_require_strong_auth(void);
int lp_ldap_ssl(void);
bool lp_ldap_ssl_ads(void);
char *lp_ldap_suffix(TALLOC_CTX *ctx);
int lp_ldap_timeout(void);
char *lp__ldap_user_suffix(TALLOC_CTX *ctx);
bool lp_blocking_locks(int);
int lp_csc_policy(int);
bool lp_fake_oplocks(int);
bool lp_kernel_oplocks(int);
bool lp_kernel_share_modes(int);
bool lp_level2_oplocks(int);
bool lp_locking(const struct share_params *p);
int lp_lock_spin_time(void);
int lp_oplock_break_wait_time(void);
int lp_oplock_contention_limit(int);
bool lp_oplocks(int);
bool lp_posix_locking(const struct share_params *p);
bool lp_smb2_leases(void);
int lp_strict_locking(const struct share_params *p);
bool lp_debug_class(void);
bool lp_debug_hires_timestamp(void);
bool lp_debug_pid(void);
bool lp_debug_prefix_timestamp(void);
bool lp_debug_uid(void);
int lp_ldap_debug_level(void);
int lp_ldap_debug_threshold(void);
char *lp_logfile(TALLOC_CTX *ctx);
char *lp_logging(TALLOC_CTX *ctx);
char *lp_log_level(TALLOC_CTX *ctx);
int lp_max_log_size(void);
int lp_syslog(void);
bool lp_syslog_only(void);
bool lp_timestamp_logs(void);
char *lp_abort_shutdown_script(TALLOC_CTX *ctx);
char *lp_add_group_script(TALLOC_CTX *ctx);
char *lp_add_machine_script(TALLOC_CTX *ctx);
char *lp_add_user_script(TALLOC_CTX *ctx);
char *lp_add_user_to_group_script(TALLOC_CTX *ctx);
bool lp_allow_nt4_crypto(void);
char *lp_delete_group_script(TALLOC_CTX *ctx);
char *lp_delete_user_from_group_script(TALLOC_CTX *ctx);
char *lp_delete_user_script(TALLOC_CTX *ctx);
bool lp__domain_logons(void);
bool lp_enable_privileges(void);
int lp_init_logon_delay(void);
const char **lp_init_logon_delayed_hosts(void);
const char *lp_logon_drive(void);
const char *lp_logon_home(void);
const char *lp_logon_path(void);
const char *lp_logon_script(void);
bool lp_reject_md5_clients(void);
char *lp_set_primary_group_script(TALLOC_CTX *ctx);
char *lp_shutdown_script(TALLOC_CTX *ctx);
char *lp_add_share_command(TALLOC_CTX *ctx);
bool lp_afs_share(int);
int lp_afs_token_lifetime(void);
const char *lp_afs_username_map(void);
bool lp_allow_insecure_wide_links(void);
bool lp_async_smb_echo_handler(void);
char *lp_auto_services(TALLOC_CTX *ctx);
const char *lp_cache_directory(void);
bool lp_change_notify(void);
char *lp_change_share_command(TALLOC_CTX *ctx);
const char **lp_cluster_addresses(void);
bool lp_clustering(void);
char *lp_next_configfile(TALLOC_CTX *ctx);
const char *lp__ctdbd_socket(void);
int lp_ctdb_locktime_warn_threshold(void);
int lp_ctdb_timeout(void);
char *lp_defaultservice(TALLOC_CTX *ctx);
bool lp_delete_readonly(int);
char *lp_delete_share_command(TALLOC_CTX *ctx);
int lp_dfree_cache_time(int);
char *lp_dfree_command(TALLOC_CTX *ctx, int);
int lp_directory_name_cache_size(int);
bool lp_dmapi_support(int);
char *lp_dont_descend(TALLOC_CTX *ctx, int);
bool lp_dos_filemode(int);
bool lp_dos_filetime_resolution(int);
bool lp_dos_filetimes(int);
bool lp_fake_directory_create_times(int);
bool lp_follow_symlinks(int);
const char *lp_fstype(int);
char *lp_homedir_map(TALLOC_CTX *ctx);
bool lp_kernel_change_notify(void);
const char *lp_lock_directory(void);
bool lp_log_writeable_files_on_exit(void);
char *lp_magic_output(TALLOC_CTX *ctx, int);
char *lp_magic_script(TALLOC_CTX *ctx, int);
char *lp_message_command(TALLOC_CTX *ctx);
const char *lp_nbt_client_socket_address(void);
const char *lp_ncalrpc_dir(void);
bool lp_nis_homedir(void);
bool lp_nmbd_bind_explicit_broadcast(void);
char *lp_panic_action(TALLOC_CTX *ctx);
char *lp_perfcount_module(TALLOC_CTX *ctx);
const char *lp_pid_directory(void);
char *lp_postexec(TALLOC_CTX *ctx, int);
char *lp_preexec(TALLOC_CTX *ctx, int);
bool lp_preexec_close(int);
bool lp_registry_shares(void);
char *lp_remote_announce(TALLOC_CTX *ctx);
char *lp_remote_browse_sync(TALLOC_CTX *ctx);
bool lp_reset_on_zero_vc(void);
char *lp_root_postexec(TALLOC_CTX *ctx, int);
char *lp_root_preexec(TALLOC_CTX *ctx, int);
bool lp_root_preexec_close(int);
int lp_smbd_profiling_level(void);
bool lp_spotlight(int);
const char *lp_state_directory(void);
bool lp_usershare_allow_guests(void);
int lp_usershare_max_shares(void);
bool lp_usershare_owner_only(void);
char *lp_usershare_path(TALLOC_CTX *ctx);
const char **lp_usershare_prefix_allow_list(void);
const char **lp_usershare_prefix_deny_list(void);
char *lp_usershare_template_share(TALLOC_CTX *ctx);
bool lp_utmp(void);
const char *lp_utmp_directory(void);
char *lp_volume(TALLOC_CTX *ctx, int);
bool lp_wide_links(int);
const char *lp_wtmp_directory(void);
char *lp_addport_command(TALLOC_CTX *ctx);
char *lp_addprinter_command(TALLOC_CTX *ctx);
int lp_cups_connection_timeout(void);
int lp_cups_encrypt(void);
char *lp_cups_options(TALLOC_CTX *ctx, int);
char *lp_cups_server(TALLOC_CTX *ctx);
bool lp_default_devmode(int);
char *lp_deleteprinter_command(TALLOC_CTX *ctx);
bool lp__disable_spoolss(void);
char *lp_enumports_command(TALLOC_CTX *ctx);
bool lp_force_printername(int);
char *lp_iprint_server(TALLOC_CTX *ctx);
bool lp_load_printers(void);
char *lp_lppause_command(TALLOC_CTX *ctx, int);
int lp_lpq_cache_time(void);
char *lp_lpq_command(TALLOC_CTX *ctx, int);
char *lp_lpresume_command(TALLOC_CTX *ctx, int);
char *lp_lprm_command(TALLOC_CTX *ctx, int);
int lp_max_print_jobs(int);
int lp_max_reported_print_jobs(int);
char *lp_os2_driver_map(TALLOC_CTX *ctx);
bool lp_printable(int);
int lp_printcap_cache_time(void);
const char *lp_printcap_name(void);
char *lp_print_command(TALLOC_CTX *ctx, int);
char *lp__printername(TALLOC_CTX *ctx, int);
int lp_printing(int);
const char *lp_printjob_username(int);
bool lp_print_notify_backchannel(int);
char *lp_queuepause_command(TALLOC_CTX *ctx, int);
char *lp_queueresume_command(TALLOC_CTX *ctx, int);
bool lp_show_add_printer_wizard(void);
bool lp_use_client_driver(int);
bool lp_acl_allow_execute_always(int);
bool lp_acl_check_permissions(int);
bool lp_acl_map_full_control(int);
int lp_cldap_port(void);
int lp__client_ipc_max_protocol(void);
int lp__client_ipc_min_protocol(void);
int lp__client_max_protocol(void);
int lp_client_min_protocol(void);
bool lp_client_use_spnego(void);
const char **lp_dcerpc_endpoint_servers(void);
bool lp_defer_sharing_violations(void);
int lp_dgram_port(void);
bool lp_disable_netbios(void);
bool lp_durable_handles(int);
bool lp_ea_support(int);
bool lp_enable_asu_support(void);
const char **lp_eventlog_list(void);
bool lp_large_readwrite(void);
bool lp_lsa_over_netlogon(void);
bool lp_map_acl_inherit(int);
int lp_max_mux(void);
int lp_max_ttl(void);
int lp_max_wins_ttl(void);
int lp_max_xmit(void);
int lp_min_receivefile_size(void);
int lp_min_wins_ttl(void);
const char **lp_name_resolve_order(void);
int lp_nbt_port(void);
bool lp_nt_acl_support(int);
bool lp_nt_pipe_support(void);
bool lp_nt_status_support(void);
bool lp_profile_acls(int);
bool lp_read_raw(void);
bool lp_rpc_big_endian(void);
int lp_rpc_server_port(void);
int lp_server_max_protocol(void);
int lp_server_min_protocol(void);
bool lp_server_multi_channel_support(void);
int lp_smb2_max_credits(void);
int lp_smb2_max_read(void);
int lp_smb2_max_trans(void);
int lp_smb2_max_write(void);
const char **lp_smb_ports(void);
const char **lp_svcctl_list(void);
bool lp_time_server(void);
bool lp_unicode(void);
bool lp_unix_extensions(void);
bool lp_use_spnego(void);
int lp_web_port(void);
bool lp_write_raw(void);
bool lp_access_based_share_enum(int);
bool lp_acl_group_control(int);
const char **lp_admin_users(int);
int lp_algorithmic_rid_base(void);
bool lp_allow_dcerpc_auth_level_connect(void);
bool lp_allow_trusted_domains(void);
const char **lp_auth_methods(void);
char *lp_check_password_script(TALLOC_CTX *ctx);
int lp__client_ipc_signing(void);
bool lp_client_lanman_auth(void);
bool lp_client_ntlmv2_auth(void);
bool lp_client_plaintext_auth(void);
int lp_client_schannel(void);
int lp_client_signing(void);
bool lp_client_use_spnego_principal(void);
int lp_create_mask(int);
const char *lp_dedicated_keytab_file(void);
int lp_directory_mask(int);
bool lp_encrypt_passwords(void);
int lp_force_create_mode(int);
int lp_force_directory_mode(int);
char *lp_force_group(TALLOC_CTX *ctx, int);
bool lp_force_unknown_acl_user(int);
char *lp_force_user(TALLOC_CTX *ctx, int);
const char *lp_guest_account(void);
bool lp_guest_ok(int);
bool lp_guest_only(int);
const char **lp_hosts_allow(int);
const char **lp_hosts_deny(int);
bool lp_inherit_acls(int);
int lp_inherit_owner(int);
bool lp_inherit_permissions(int);
const char **lp_invalid_users(int);
int lp_kerberos_encryption_types(void);
int lp_kerberos_method(void);
int lp_kpasswd_port(void);
int lp_krb5_port(void);
bool lp_lanman_auth(void);
char *lp_log_nt_token_command(TALLOC_CTX *ctx);
int lp_map_to_guest(void);
bool lp_map_untrusted_to_domain(void);
bool lp_ntlm_auth(void);
const char *lp_ntp_signd_socket_directory(void);
bool lp_null_passwords(void);
bool lp_obey_pam_restrictions(void);
int lp_old_password_allowed_period(void);
bool lp_pam_password_change(void);
const char *lp_passdb_backend(void);
bool lp_passdb_expand_explicit(void);
char *lp_passwd_chat(TALLOC_CTX *ctx);
bool lp_passwd_chat_debug(void);
int lp_passwd_chat_timeout(void);
char *lp_passwd_program(TALLOC_CTX *ctx);
const char **lp_password_hash_gpg_key_ids(void);
const char *lp_password_server(void);
const char **lp_preload_modules(void);
const char *lp_private_dir(void);
bool lp_raw_ntlmv2_auth(void);
const char **lp_read_list(int);
bool lp_read_only(int);
char *lp_rename_user_script(TALLOC_CTX *ctx);
int lp_restrict_anonymous(void);
char *lp_root_directory(TALLOC_CTX *ctx);
const char **lp_samba_kcc_command(void);
int lp__security(void);
int lp__server_role(void);
int lp_server_schannel(void);
int lp_server_signing(void);
int lp_smb_encrypt(int);
const char *lp_smb_passwd_file(void);
const char *lp__tls_cafile(void);
const char *lp__tls_certfile(void);
const char *lp__tls_crlfile(void);
const char *lp__tls_dhpfile(void);
bool lp_tls_enabled(void);
const char *lp__tls_keyfile(void);
const char *lp_tls_priority(void);
int lp_tls_verify_peer(void);
bool lp_unix_password_sync(void);
int lp_username_level(void);
char *lp_username_map(TALLOC_CTX *ctx);
int lp_username_map_cache_time(void);
char *lp_username_map_script(TALLOC_CTX *ctx);
const char **lp_valid_users(int);
const char **lp_write_list(int);
int lp_aio_max_threads(void);
int lp_aio_read_size(int);
char *lp_aio_write_behind(TALLOC_CTX *ctx, int);
int lp_aio_write_size(int);
int lp_allocation_roundup_size(int);
int lp_block_size(int);
int lp_deadtime(void);
bool lp_getwd_cache(void);
bool lp_hostname_lookups(void);
int lp_keepalive(void);
int lp_max_connections(int);
int lp_max_disk_size(void);
int lp_max_open_files(void);
int lp_max_smbd_processes(void);
int lp_min_print_space(int);
int lp_name_cache_timeout(void);
const char *lp_socket_options(void);
bool lp_strict_allocate(int);
bool lp_strict_rename(int);
bool lp_strict_sync(int);
bool lp_sync_always(int);
bool lp_use_mmap(void);
bool lp__use_sendfile(int);
int lp_write_cache_size(int);
char *lp_get_quota_command(TALLOC_CTX *ctx);
bool lp_host_msdfs(void);
char *lp_msdfs_proxy(TALLOC_CTX *ctx, int);
bool lp_msdfs_root(int);
bool lp_msdfs_shuffle_referrals(int);
const char **lp_ntvfs_handler(int);
char *lp_set_quota_command(TALLOC_CTX *ctx);
const char **lp_vfs_objects(int);
bool lp_create_krb5_conf(void);
int lp_idmap_cache_time(void);
int lp_idmap_negative_cache_time(void);
bool lp_include_system_krb5_conf(void);
bool lp_neutralize_nt4_emulation(void);
bool lp_reject_md5_servers(void);
bool lp_require_strong_key(void);
const char *lp_template_homedir(void);
const char *lp_template_shell(void);
int lp_winbind_cache_time(void);
const char *lp_winbindd_privileged_socket_directory(void);
const char *lp_winbindd_socket_directory(void);
bool lp_winbind_enum_groups(void);
bool lp_winbind_enum_users(void);
int lp_winbind_expand_groups(void);
int lp_winbind_max_clients(void);
int lp__winbind_max_domain_connections(void);
bool lp_winbind_nested_groups(void);
bool lp_winbind_normalize_names(void);
const char **lp_winbind_nss_info(void);
bool lp_winbind_offline_logon(void);
int lp_winbind_reconnect_delay(void);
bool lp_winbind_refresh_tickets(void);
int lp_winbind_request_timeout(void);
bool lp_winbind_rpc_only(void);
bool lp_winbind_sealed_pipes(void);
const char *lp_winbind_separator(void);
bool lp_winbind_trusted_domains_only(void);
bool lp_winbind_use_default_domain(void);
bool lp_wins_dns_proxy(void);
char *lp_wins_hook(TALLOC_CTX *ctx);
bool lp_wins_proxy(void);
const char **lp_wins_server_list(void);
bool lp_we_are_a_wins_server(void);

#endif /* __PARAM_PROTO_H__ */

